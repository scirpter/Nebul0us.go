package specs

import (
	"neb/src/base/enums"
	"neb/src/base/models"
	"neb/src/common"
	mnet "neb/src/net"
	"net"
)

type Net struct {
	Uniquifier      uint8
	ConnectionState enums.CONNECTION_STATE
	ServerIP        enums.SERVER
	Sock            *net.UDPConn
	World           *models.World
	SlaveProxy      *mnet.Proxy
	MasterProxy     *mnet.Proxy

	// in case a join request goes wrong, we need to keep track of the world
	CachedWorld *models.World

	// two tokens received from CONNECT_RESULT_2 (0x01).
	// used to identify the client server-side.

	Cr2Token1 uint32
	Cr2Token2 uint32

	// same as above, but randomly generated by ourselves.
	// these also need to be provided sometimes when
	// sending packets, e.g. DISCONNECT (0x07).

	RngToken1 uint32
	RngToken2 uint32
}

type BlobData struct {
	Name              *string
	AccountID         int32
	Token             *string
	Skin              enums.SKIN
	ColorCycle        enums.COLOR_CYCLE
	NameFont          enums.FONT
	Halo              common.Undefined
	Hat               common.Undefined
	Particle          common.Undefined
	ProfileVisibility enums.PROFILE_VISIBILITY
	EjectSkin         common.Undefined
}

type ControlData struct {
	Speed       uint8
	Angle       float32
	EjectCt     uint8
	SplitCt     uint8
	DropCt      uint8
	ControlTick uint8
}

const (
	PLASMA_FARMING_SAFE_RESET_TIMER_DEFAULT = 600
	MASS_THRESHOLD_DEFAULT                  = 250
	DND_BOT_DIRECTION_DEFAULT               = common.BOTTOMLEFT
)

type Statery struct {
	IsAutoRejoining                    bool
	IsFarmingPlasma                    bool
	PlasmaFarmingSafeResetTimer        uint16
	IsFarmingHoles                     bool
	EmotionalSupportPlayerName         *string
	EmotionalSupportPlayerAccountID    int32
	PlasmaFarmingTargetPlayerName      *string
	PlasmaFarmingTargetPlayerAccountID int32
	IsEmoteLooping                     bool
	EmoteLoopID                        uint8
	MassThreshold                      int32
	BRRegistrantsCt                    uint8
	IsPlasmaExploitEnabled             bool
	TaskLock                           bool
	IsDNDModeEnabled                   bool
	DNDModeAngle                       common.MapCornerDirection
	WhichProxyType                     mnet.WhichProxyType
}

func NewStatery() *Statery {
	return &Statery{
		IsAutoRejoining:                    true,
		IsFarmingPlasma:                    false,
		PlasmaFarmingSafeResetTimer:        PLASMA_FARMING_SAFE_RESET_TIMER_DEFAULT,
		IsFarmingHoles:                     false,
		EmotionalSupportPlayerName:         nil,
		EmotionalSupportPlayerAccountID:    -1,
		PlasmaFarmingTargetPlayerName:      nil,
		PlasmaFarmingTargetPlayerAccountID: -1,
		IsEmoteLooping:                     false,
		EmoteLoopID:                        0,
		MassThreshold:                      MASS_THRESHOLD_DEFAULT,
		BRRegistrantsCt:                    0,
		IsPlasmaExploitEnabled:             false,
		TaskLock:                           false,
		IsDNDModeEnabled:                   false,
		DNDModeAngle:                       common.BOTTOMLEFT,
		WhichProxyType:                     mnet.PROXY_MASTER,
	}
}
